version: "3.8"

#TheHive & Cortex
services:
  elasticsearch:
    image: 'elasticsearch:7.13.1'
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - '0.0.0.0:9200:9200'
    environment:
      - http.host=0.0.0.0
      - discovery.type=single-node
      - cluster.name=hive
      - script.allowed_types= inline
      - thread_pool.search.queue_size=100000
      - thread_pool.write.queue_size=10000
      - gateway.recover_after_nodes=1
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=-Xms256m -Xmx256m
    ulimits:
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - './elasticsearch/data:/usr/share/elasticsearch/data'
      - './elasticsearch/logs:/usr/share/elasticsearch/logs'
  
  cortex:
    image: 'thehiveproject/cortex:latest'
    container_name: cortex
    restart: unless-stopped
    command:
      --job-directory ${JOB_DIRECTORY}
    environment:
      - 'JOB_DIRECTORY=${JOB_DIRECTORY}'
    volumes:
      - './cortex/application.conf:/etc/cortex/application.conf'
      - '${JOB_DIRECTORY}:${JOB_DIRECTORY}'
      - '/var/run/docker.sock:/var/run/docker.sock'
    depends_on:
      - elasticsearch
    ports:
      - '0.0.0.0:9001:9001'
  thehive:
    image: 'thehiveproject/thehive4:latest'
    container_name: 'thehive4'
    restart: unless-stopped
    depends_on:
      - elasticsearch
      - cortex
    ports:
      - '0.0.0.0:9000:9000'
    links: 
      - elasticsearch
      - cortex  
    volumes:
      - './thehive/application.conf:/etc/thehive/application.conf'
      - './thehive/db:/opt/thp/thehive/db'
      - './thehive/data:/opt/thp/thehive/data'
      - './thehive/index:/opt/thp/thehive/index'
    command: '--no-config --no-config-secret'

## n8n
  n8n:
    image: n8nio/n8n
    container_name: n8n
    restart: unless-stopped
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - 'DB_POSTGRESDB_DATABASE=${POSTGRES_DB}'
      - 'DB_POSTGRESDB_USER=${POSTGRES_USER}'
      - 'DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}'
      - 'N8N_BASIC_AUTH_ACTIVE=${N8N_BASIC_AUTH_ACTIVE}'
      - 'N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER}'
      - 'N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD}'
    ports:
      - '0.0.0.0:5678:5678'
    links:
      - postgres
    volumes:
      - './n8n/.n8n:/root/.n8n'
      - './n8n/workflows:/opt/workflows'
    command: n8n start
  postgres:
    image: postgres
    container_name: PostgresDB
    restart: unless-stopped
    environment:
      - 'POSTGRES_USER=${POSTGRES_USER}'
      - 'POSTGRES_PASSWORD=${POSTGRES_PASSWORD}'
      - 'POSTGRES_DB=${POSTGRES_DB}'
    volumes:
      - './vol/postgres/data:/var/lib/postgresql/data'


#MISP
  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
  db:
    image: mysql:latest
    container_name: db
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    environment:
      - "MYSQL_USER=misp"
      - "MYSQL_PASSWORD=example"
      - "MYSQL_ROOT_PASSWORD=password"
      - "MYSQL_DATABASE=misp"
    volumes:
      - ./misp/data:/var/lib/mysql

  misp:
    image: coolacid/misp-docker:core-latest
    container_name: misp
    restart: unless-stopped
    depends_on:
      - redis
      - db
    ports:
      - "80:80"
      - "443:443"
    environment:
      - "HOSTNAME=https://localhost"
      - "REDIS_FQDN=redis"
      - "INIT=true"             # Initialze MISP, things includes, attempting to import SQL and the Files DIR
      - "CRON_USER_ID=1"        # The MISP user ID to run cron jobs as
      - "DISIPV6=true" # Disable IPV6 in nginx

  misp-modules:
    image: coolacid/misp-docker:modules-latest
    container_name: misp-modules
    environment:
      - "REDIS_BACKEND=redis"
    depends_on:
      - redis
      - db
## Viper
  viper:
    build: viper
    ports:
      - "0.0.0.0:8080:8080"
    mem_limit: 512m

